name: Reusable workflow for building multi-arch images

on:
  workflow_call:
    inputs:
      build-context:
        required: true
        type: string
      version:
        required: false
        default: "3.16.5"
        type: string
      tbt_version:
        required: true
        type: string
      tag:
        required: true
        type: string
      twcv:
        required: false
        default: "v1.6.31"
        type: string
      ticv:
        required: false
        default: "v1.8.0"
        type: string
      ptf:
        required: false
        type: string
        default: "linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6"

env:
  PUSHFLAG: ${{ github.ref == 'refs/heads/main' }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          install: true
          use: true
      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ inputs.build-context }}
          file: ./Dockerfile
          build-args: |
            TBT_VERSION=${{ inputs.tbt_version }}
            VERSION=${{ inputs.version }}
            TZ=America/Chicago
          platforms: ${{ inputs.ptf }}
          provenance: false
          push: ${{ env.PUSHFLAG }}
          #labels: ${{ }}
          tags: ${{ inputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: gettag
        uses: jungwinter/split@v2
        id: split
        with:
            msg: ${{ inputs.tag }}
            separator: ','
      - name: set_print
        id: gettag
        run: |
          echo "split_1:  ${{ steps.split.outputs._1 }}"
          docker buildx imagetools inspect  ${{ steps.split.outputs._0 }}