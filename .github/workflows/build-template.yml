name: Reusable workflow for building multi-arch images

on:
  workflow_call:
    inputs:
      image:
        type: string
        default: nordlynx-transmission
        description: "image name"
      tag:
        type: string
        default: latest
        description: "tag"
      push:
        type: string
        default: 'false'
        description: "push to registry"
      ptf:
        type: string
        # no dante-server on ubuntu 24.04 for armhf
        default: "linux/amd64, linux/arm64, linux/arm/v7, linux/arm/v6"
        description: "platforms linux/xx"
      base_image:
        required: false
        default: "debian:bookworm-slim" # ubuntu:24.04
        type: string
      wg:
        type: boolean
        default: false # true
        description: "Wireguard client included"
#-----------------------------
      build-context:
        required: true
        type: string
      version:
        required: false
        default: "4.0.0"
        type: string
      tbt_version:
        required: true
        type: string
      twcv:
        required: false
        default: "1.6.33"
        type: string
      ticv:
        required: false
        default: "1.8.0"
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: set push value, os
        run: |
          if [[ "true" == "${{ inputs.push }}" ]]; then 
            echo "LOAD=false">> $GITHUB_ENV
            echo "PTF=${{ inputs.ptf }}">> $GITHUB_ENV
          else 
            echo "LOAD=true">> $GITHUB_ENV
            echo "PTF=linux/amd64">> $GITHUB_ENV
          fi
          echo "PUSH=$PUSH" >> $GITHUB_ENV

          IMAGE="${{ inputs.image }}"
          if [[ "${{ inputs.wg }}" == "true" ]]; then
            IMAGE="${{ inputs.image }}-wg"
          fi
          echo "IMAGE=$IMAGE">> $GITHUB_ENV
      - name: set tagos ubuntu
        if: contains(inputs.base_image,'ubuntu')
        run: |
          echo "tagos=ubuntu">> $GITHUB_ENV
      - name: set tagos debian
        if: contains(inputs.base_image,'debian')
        run: |
          echo "tagos=debian">> $GITHUB_ENV

      - name: checkout code
        uses: actions/checkout@v5
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          install: true
          use: true
      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}
      - name: Login to Docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: "show vars"
        run: |
          echo "TBT_VERSION=${{ inputs.tbt_version }}, VERSION=${{ inputs.version }}, TWCV=${{ inputs.twcv }}, TICV=${{ inputs.ticv }}"
          echo "IMAGE=${{ env.IMAGE }}, TAG=${{ inputs.tag }}, tagos=${{ env.tagos }}, PUSH=${{ inputs.push }}, LOAD=${{ env.LOAD }}, PTF=${{ env.PTF }}"

      # type=schedule, semver, pep440, match, edge, ref, raw, sha
      # type=raw,enable=true,priority=200,prefix=,suffix=,value=
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USER }}/${{ env.IMAGE }}
          labels: |
            org.opencontainers.image.created={{commit_date 'YYYY-MM-DDTHH:mm:ss.SSS[Z]'}}
          tags: |
            type=raw,enable=true,priority=200,prefix=,suffix=,value=${{ inputs.tag }}-${{ env.tagos }}        
            type=raw,enable=true,priority=200,prefix=,suffix=,value=latest-${{ env.tagos }}        
            type=raw,enable=${{ contains(inputs.base_image,'debian') }},priority=200,prefix=,suffix=,value=latest

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ${{ inputs.build-context }}
          file: ./Dockerfile
          build-args: |
            TBT_VERSION=${{ inputs.tbt_version }}
            VERSION=${{ inputs.version }}
            TWCV=${{ inputs.twcv }}
            TICV=${{ inputs.ticv }}
            TZ=America/Chicago
            BASE_IMAGE=${{ inputs.base_image }}
          platforms: ${{ env.ptf }}
          provenance: false
          load: ${{ fromJSON(env.LOAD) }}
          push: ${{ inputs.push == 'true' }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: inspect_image_tag
        id: inspect_img
        run: |
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          for tag in "${TAGS[@]}"; do
            docker buildx imagetools inspect "$tag"
          done
        if: ${{ inputs.push == 'true' }}
